"use strict";
// - Змінні -------------------- //

// Змінні використовуються для зберігання даних і складаються із ідентифікатора (імені) і області в пам'яті, де зберігається їх значення.

//  <ключове_слово> <ім`я_змінної> = <значення>;

// Ідентифікатор - це ім'я змінної, функції або класу. Складається з одного або декількох символів у наступному форматі.

// - Імена змінних ​------------ //

// Ідентифікатор - це ім'я змінної, функції або класу. Складається з одного або декількох символів у наступному форматі.

// - Першим символом повинна бути літера a-z або A-Z, символ підкреслення _ або знак долара $.
// - Інші символи можуть бути літерами a-z, A-Z, цифрами 0-9, підкресленнями _ і знаками долара $.
// - Ідентифікатори чуттєві до регістру. Це означає, що змінні user, usEr і User - різні.
// - Ім'я змінної повинно бути зрозумілим.

// const user = "Mango";
// const usEr = "Tango";
// const User = "Polly";
// console.log(user, usEr, User);

// - camelCase -------------------------------- //

// Використання camelCase-нотації для ідентифікаторів - це стандарт.

// Перше слово пишеться малими літерами, а кожне наступне починається з великої.

// Наприклад, user, greetUser, getUserData, isActive, activeGuestCount, totalWorkerSalary.

// - Оголошення змінних ---------------------------- //

// У JavaScript let і const - це ключові слова, які використовуються для оголошення змінних.
// Вони були введені у стандарті ECMAScript 2015 (ES6) та замінили раніше єдиний спосіб оголошення змінних за допомогою var.
//let та const мають важливі відмінності від var, які роблять їх більш підходящими для більшості випадків використання.

//!!! Оголошення змінної без ключового слова let або const призведе до помилки, якщо скрипт виконується в суворому режимі "use strict" !!!!

//  --------  const  -------------------- //

// Оголошення змінної починається з ключового слова const.

// Така змінна повинна бути одразу ініціалізована значенням, після чого її не можна перевизначити.

// const toDO = "Work"; // Не має помилки
// // const day; // X Помилка
// console.log(toDO);
// const a = 1;
// const b = 2;

// a = b; // Якщо зміна оголошена як const, перезаписати її значення не можна.
// console.log(); // X Помилка

// Спливання (Hoisting): Змінні, оголошені з const, піднімаються до початку їхньої області видимості, але не ініціалізуються.

// console.log(person); // X Помилка: Неможливо отримати доступ до ініціалізації.
const person = "John";

//  --------  let  -------------------- //

// Оголошення змінної починається з ключового слова let.
// Така змінна може бути не одразу ініціалізована значенням.

// let data;
// console.log("Value: ", data);
// data = 30;
// console.log("Value: ", data);
// data = [1, 2, 3, 4, 5];
// console.log("Value: ", data);
// data = { name: "John", age: 12 };
// console.log("Value: ", data);
// Перезначення (Reassignment): Змінній, оголошеній за допомогою let, можна надати нове значення.

// let c = 1;
// let d = 2;
// c = d;
// d = c;
// c += d;
// console.log(c); // Не має помилки

// Єдина відмінність const і let полягає у тому, що const забороняє повторно присвоювати змінній будь-яке значення.
// Оголошення const робить код читабельнішим, тому що змінна завжди посилається на одне і те саме зачення.
// У випадку з let такої впевненості немає.

// Коли використовувати let та const?

// - Використовуйте const для оголошення змінних, які не будуть призначені. Це робить код більш передбачуваним та захищеним від випадкових змін.
// - Використовуйте let для змінних, які можуть бути змінені в процесі виконання програми. let слід використовувати замість var для досягнення більшої передбачуваності поведінки та зменшення помилок, пов'язаних із областями видимості.
// - Загалом, рекомендується використовувати const за замовчуванням і переходити на let лише у випадках, коли змінної потрібно змінювати значення.
