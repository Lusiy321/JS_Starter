"use strict";

// Тернарний оператор
// Тернарний оператор використовується у якості синтаксично коротшої заміни інструкції if...else, коли одній і тій самій змінній необхідно присвоїти різні значення за умовою.

// <умова> ? <вираз_якщо_умова_правдива> : <вираз_якщо_умова_хибна>

// Працює за наступною схемою:

// - Обчислюється умова.
// - Якщо умова правдива, тобто приводиться до true, обчислюється вираз після ?.
// - Якщо умова хибна, тобто приводиться до false, обчислюється вираз після :.
// - Значення обчисленого виразу повертається у якості результату роботи тернарного оператора.

// let msg;
// const yearsOld = 20;

// if (yearsOld >= 18) {
//   msg = "Ви віком більше 18";
// } else {
//   msg = "Ви недостатнього віку менше";
// }

// console.log(msg); // "Ви віком більше 18"

// Виконаємо рефакторинг, замінивши if...else на тернарний оператор.

// const age = 18;

// const message =
//   age >= 18 ? "Ви віком більше 18" : "Ви недостатнього віку менше";

// console.log(message); // "Ви віком більше 18"

// Тернарний оператор може бути використаний у рядках коду, де необхідно повернути різне значення в залежності від умови.

// Запишемо операцію пошуку більшого числа.

// const num1 = 5;
// const num2 = 10;
// const biggerNumber = num1 > num2 ? num1 : num2;

// console.log(biggerNumber); // 10

// Tернарний оператор повинен використовуватися у простих операціях присвоєння або повернення.
// Його використання для опису складних розгалужень - погана практика.

// Реальний приклад використання тернарних операторів в коді

// const user = {
//   bybit: 12,
//   binance: null,
// }; // Об'єкт який приходить з бази даних

// const bybitPercent =
//   user.bybit !== null && !isNaN(user.bybit) ? `${user.bybit}%` : "Не має";

// const binancePercent =
//   user.binance !== null && !isNaN(user.binance) ? `${user.binance}%` : "Не має";

// console.log("Ваш відсоток на біржі bybit: ", bybitPercent);
// console.log("Ваш відсоток на біржі binance: ", binancePercent);
