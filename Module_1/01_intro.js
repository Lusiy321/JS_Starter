"use strict"
//  JavaScript (JS) 

// JavaScript - Динамічна, об'єктно-орієнтована прототипна мова програмування. Реалізація стандарту ECMAScript, яка підтримується усіма сучасними веб-браузерами. 
// В першу чергу призначена для взаємодії з елементами веб-сторінок і додавання інтерактивності.


// JavaScript класифікують як прототипну, скриптову мову програмування з динамічною типізацією. 
// Окрім прототипної, JavaScript також частково підтримує інші парадигми програмування і деякі відповідні архітектурні властивості, зокрема: 
// - динамічна та слабка типізація (не плутати з TypeScript), 
// - автоматичне керування пам'яттю, 
// - прототипне наслідування, 
// - функції як об'єкти першого класу.


// На сьогодні, використовуючи JavaScript, можна створювати:

// - веб-застосунки на фреймворках React, Vue, Angular та інших
// - бекенд-застосунки на Node.js (Express, NestJS)
// - мобільні застосунки на React Native або Ionic чи Cordova
// - десктоп-застосунки за допомогою Electron або NW.js
// - мікроконтролери з Johnny-Five і Espruino



// У JavaScript код виконується у кілька етапів, які забезпечують інтерпретацію та виконання програм. 
// Цей процес включає створення глобального контексту виконання, виклик функцій, роботу з асинхронними операціями та обробку помилок. 

//Ось як виконується код у JavaScript:

// JavaScript є однопотоковою мовою, що означає, що він виконує лише один фрагмент коду за раз.

// ----- Інтерпретація та компіляція

// JavaScript є мовою з інтерпретацією, що означає, що код виконується по рядку. Однак сучасні JavaScript-движки, такі як V8, 
// перед виконанням коду виконують попередню компіляцію у проміжний байт-код для оптимізації.

// Код у JavaScript виконується послідовно, з верху у низ та з ліва на право із застосуванням механізмів підйому оголошень.

// ----- Контекст виконання

// JavaScript виконує код у контексті виконання, який створюється для кожного фрагмента коду. 

//Існує два основних типи контекстів:

// - Глобальний контекст: Це контекст, який створюється при завантаженні скрипта. 
// Усі змінні та функції, оголошені в глобальному контексті, доступні в усьому скрипті.

// - Контекст функції: Створюється при виклику функції. 
// Усі змінні та об'єкти, оголошені всередині функції, мають локальну область видимості.


// Приклад виконання коду в контексті функціі.

console.log(myFunction()); // Виконається успішно
function myFunction() {
    return "Hello, world!";
}

function first() {
    second();
    console.log('First');
}

function second() {
    console.log('Second');
}

first();

// Асинхронність та Event Loop

// JavaScript є однопотоковою мовою. Однак асинхронні операції, такі як таймери, запити до сервера або введення/виведення, виконуються за допомогою подій (event loop). 
// Асинхронні функції (наприклад, setTimeout) поміщаються в чергу повідомлень (callback queue), яка обробляється після виконання коду в стеку викликів. 

// Приклад асинхронності 

console.log('Start main code...');
const mainCode = "Use main code here";
console.log(mainCode);
setTimeout(() => {
    console.log('async Timeout');
}, 3000);

console.log('End main code...');


// ---------  Посилання для самостійної роботи: ------------------- //


// Інструменти розробника

// Виведення повідомлень в консоль: https://developer.chrome.com/docs/devtools/console/log/
// Довідник з API консолі:  https://developer.chrome.com/docs/devtools/console/log/